from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message

from data.config import STATUS_TRANSACTIONS
from keyboards.inline.adminkeyinline import backFunKey, sendPaymentKey, transactionViewerKey, transactionsListKey, twoFactorFalsePayKey
from loader import *
from states.admin_state import paymentUser
from utils.misc_func.bot_models import FSM
from utils.misc_func.otherfunc import generate_short_uuid


def default_transaction_text(user, transaction):
    return (
        f"<b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>{transaction['_id']}</code>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user['full_name']}</code>\n"
        f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n"
        f"üÜî: <code>{user['_id']}</code>\n\n"
        f"üí∏ –°—É–º–º–∞: <code>{transaction['amount']}$</code>\n"
        f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: <b>{STATUS_TRANSACTIONS[transaction['status']]['name']}</b>"
    )


@adminRouter.message(F.text == "üí± –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def admin_transactions_pay(msg: Message, state: FSM):
    await state.clear()
    transactions_list = await db.get_all_transactions()
    transactions_list.reverse()
    text = (
        "<b>üí± –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        "<i>‚ÑπÔ∏è –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>\n\n"
        '‚ÑπÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ–µ ID –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–º–µ—é—â–µ–π—Å—è —É –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π <b>"üîé –ü–æ–∏—Å–∫"</b>'
    )
    key = transactionsListKey(transactions_list[:5], 0, len(transactions_list[:5]), len(transactions_list))
    return msg.answer(text, reply_markup=key)


@adminRouter.callback_query(F.data == "transactions")
async def transactions_page_func(call: CallbackQuery, state: FSM):
    await state.clear()
    transactions_list = await db.get_all_transactions()
    transactions_list.reverse()
    text = (
        "<b>üí± –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        "<i>‚ÑπÔ∏è –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>\n\n"
        '‚ÑπÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ–µ ID –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–º–µ—é—â–µ–π—Å—è —É –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π <b>"üîé –ü–æ–∏—Å–∫"</b>'
    )
    key = transactionsListKey(transactions_list[:5], 0, len(transactions_list[:5]), len(transactions_list))
    return call.message.edit_text(text, reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_tr_next_"))
async def list_payments_func_next(call: CallbackQuery, state: FSM):
    step = int(call.data.replace("list_tr_next_", ""))
    await state.clear()
    transactions_list = await db.get_all_transactions()
    transactions_list.reverse()
    if len(transactions_list[step : step + 5]) == 0:
        await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
    else:
        key = transactionsListKey(
            transactions_list[step : step + 5],
            step,
            len(transactions_list[: step + 5]),
            len(transactions_list),
        )
        await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_tr_back_"))
async def list_payments_page_back(call: CallbackQuery, state: FSM):
    step = int(call.data.replace("list_tr_back_", ""))
    if step == 0:
        await call.answer("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
    else:
        await state.clear()
        transactions_list = await db.get_all_transactions()
        transactions_list.reverse()
        key = transactionsListKey(
            transactions_list[step - 5 : step],
            step - 5,
            len(transactions_list[:step]),
            len(transactions_list),
        )
        await call.message.edit_reply_markup(reply_markup=key)


@adminRouter.inline_query(F.query.startswith("payment "))
async def payment_inline_query_func(query: InlineQuery, state: FSM):
    user_params = query.query.replace("payment ", "")
    transactions_list = await db.get_all_transactions()
    return_list = []
    param = str(user_params).lower()
    for item in transactions_list:
        if (
            param in str(item["_id"]).lower()
            or param in str(item["user_id"]).lower()
            or param in str(item["status"])
        ):
            add = InlineQueryResultArticle(
                id=generate_short_uuid(),
                title=f"ID: {item['_id']} ({item['amount']})",
                input_message_content=InputTextMessageContent(
                    message_text=f"/transacition {item['_id']}"
                ),
            )
            return_list.append(add)
    await query.answer(results=return_list, cache_time=1)


@adminRouter.message(F.text.startswith("/transacition "))
async def open_user_message_func(msg: Message, state: FSM):
    await state.clear()
    transaction_id = int(msg.text.replace("/transacition ", ""))
    transaction = await db.get_transaction(transaction_id)
    user = await db.get_user_info(int(transaction["user_id"]))
    text = default_transaction_text(user, transaction)
    return msg.answer(text, reply_markup=transactionViewerKey(transaction_id, transaction["status"]))


@adminRouter.callback_query(F.data.startswith("gettrans_"))
async def gettrans_page(call: CallbackQuery, state: FSM):
    await state.clear()
    transaction_id = int(call.data.split("_")[1])
    transaction = await db.get_transaction(transaction_id)
    user = await db.get_user_info(int(transaction["user_id"]))
    text = default_transaction_text(user, transaction)
    return call.message.edit_text(
        text, reply_markup=transactionViewerKey(transaction_id, transaction["status"])
    )


@adminRouter.callback_query(F.data.startswith("payout_"))
async def payout_page(call: CallbackQuery, state):
    # callback –º–æ–∂–µ—Ç –±—ã—Ç—å: payout_<id> –∏–ª–∏ payout_<id>_<amount>
    parts = call.data.split("_")
    try:
        number_id = int(parts[1])
    except Exception:
        await call.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback", show_alert=True)
        return

    amount = None
    if len(parts) >= 3:
        # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É –∏–∑ callback
        try:
            amount = float(parts[2])
        except:
            amount = None

    # –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ‚Äî –±–µ—Ä–µ–º –∏–∑ –ë–î
    if amount is None:
        row = await db.fetchrow("SELECT tariff_price, user_id, phone_number FROM numbers WHERE _id=$1", number_id)
        if not row:
            await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        amount = float(row.get("tariff_price") or 0)
        user_id = row.get("user_id")
        phone = row.get("phone_number")
    else:
        row = await db.fetchrow("SELECT user_id, phone_number FROM numbers WHERE _id=$1", number_id)
        user_id = row.get("user_id")
        phone = row.get("phone_number")

    # —Ç—É—Ç –∑–∞–ø—É—Å–∫–∞–µ—à—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –≤—ã–ø–ª–∞—Ç—ã: payments.send(user_id, amount) –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ
    # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ:
    # await db.execute("UPDATE numbers SET status='paid', payout_amount=$1 WHERE _id=$2", amount, number_id)
    await call.answer(f"–í—ã–ø–ª–∞—Ç–∞ {amount}$ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞")
    # –∏ –æ–±–Ω–æ–≤–∏ —Ç–µ–∫—Å—Ç/markup —É –∞–¥–º–Ω–∏—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∂–µ–ª–∞–Ω–∏—é

@adminRouter.message(paymentUser.url)
async def payment_user_message(msg: Message, state: FSM):
    data = await state.get_data()
    _id = int(data["trans_id"])
    if "https://t.me/" in msg.text:
        transaction = await db.get_transaction(int(_id))
        user = await db.get_user_info(int(transaction["user_id"]))
        await state.update_data(url=msg.text)
        text = default_transaction_text(user, transaction)
        text += f"\nüí∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ {msg.text} ?"
        await state.set_state(paymentUser.send)
        return msg.answer(text, reply_markup=sendPaymentKey(_id))
    else:
        await state.set_state(paymentUser.url)
        text = "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        return msg.answer(text, reply_markup=backFunKey(f"gettrans_{_id}"))


@adminRouter.callback_query(paymentUser.send, F.data.startswith("sendcheck"))
async def sendcheck_page(call: CallbackQuery, state: FSM):
    data = await state.get_data()
    if data is None:
        return call.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–ª–∞—Ç—ã –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É —Å–Ω–æ–≤–∞")
    _id = data["trans_id"]
    transaction = await db.get_transaction(int(_id))
    user = await db.get_user_info(int(transaction["user_id"]))
    text_user = (
        f"üÜî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{_id}</code>\n\n"
        f"üí∏ –í–∞—à —á–µ–∫ –Ω–∞ <code>{transaction['amount']}$</code>\n\n"
        f"{data['url']}"
    )
    await bot.send_message(chat_id=transaction["user_id"], text=text_user)
    await db.update_transaction_status(int(_id), "finish_withdraft", data["url"])
    admin_text = default_transaction_text(user, transaction)
    admin_text += "\nüí∏ –ß–µ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª—é, –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –≤—ã–ø–ª–∞—Ç—É"
    return call.message.edit_text(admin_text)


@adminRouter.callback_query(F.data.startswith("falsepay_"))
async def falsepay_page(call: CallbackQuery, state: FSM):
    _id = int(call.data.split("_")[1])
    await state.clear()
    transaction = await db.get_transaction(int(_id))
    user = await db.get_user_info(int(transaction["user_id"]))
    text = default_transaction_text(user, transaction)
    text += (
        "\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –≤—ã–ø–ª–∞—Ç—É? –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å"
    )
    return call.message.edit_text(text, reply_markup=twoFactorFalsePayKey(_id))


@adminRouter.callback_query(F.data.startswith("falpays_"))
async def falpays_page(call: CallbackQuery, state: FSM):
    _id = int(call.data.split("_")[1])
    await state.clear()
    transaction = await db.get_transaction(int(_id))
    user = await db.get_user_info(int(transaction["user_id"]))
    await db.update_transaction_status(int(_id), "false_withdraft")
    text = default_transaction_text(user, transaction)
    text += "\n‚ôªÔ∏è –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å"
    user_text = (
        "‚ùì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∫–æ–π —Ç–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω–∏–ª–∞ –≤–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. "
        "–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        f"–ö –≤–æ–∑–≤—Ä–∞—Ç—É: <code>{transaction['amount']}$</code>"
    )
    up_balance = await db.update_amount_user(user["_id"], float(transaction["amount"]))
    await bot.send_message(chat_id=user["_id"], text=user_text)
    return call.message.edit_text(text)
