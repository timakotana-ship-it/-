from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from data.config import CHAT_ID, ROLES, STATUS_QUEUE, WORK_THREAD_ID
from keyboards.inline.adminkeyinline import (
	activeTicketListKey,
	phonesListWorks,
	startPhoneWork,
	twoFactorCancleWork,
	twoFactorSclet,
	twoFactorSucWork,
	workPanel,
	openWorkPanel,
	sendCodeUser
)
from keyboards.inline.userinlinekey import authUserKey
from loader import *
from states.admin_state import setAuthCode
from utils.misc_func.bot_models import FSM


def phone_default_text(user: dict, info: dict) -> str:
	admin_text = (
		f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{info['phone_number']}</code>\n"
		f"üíª –°—Ç–∞—Ç—É—Å: {STATUS_QUEUE[info['status']]['name']}\n\n"
		f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user['full_name']}</code>\n"
		f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n"
		f"üÜî: <code>{user['_id']}</code>"
	)
	return admin_text


@adminRouter.callback_query(F.data.startswith("falsenum_"))
async def falsenum_page(call: CallbackQuery, state: FSM):
	_id = int(call.data.split("_")[1])
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	key = twoFactorCancleWork(_id)
	admin_text = phone_default_text(user, info)
	admin_text += "\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É?"
	return call.message.edit_text(admin_text, reply_markup=key)


@userRouter.callback_query(F.data.startswith("getauthus_"))
async def getauthus_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	await db.update_phone_number_status(int(_id), "wait_auth")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	admin_text += "\n‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
	await bot.send_message(
		chat_id=info["worker_id"], text=admin_text, reply_markup=workPanel(_id, "wait_auth")
	)
	return call.message.edit_text(f"‚ôªÔ∏è –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä <code>{info['phone_number']}</code>")


@adminRouter.callback_query(F.data.startswith("airfalse_"))
async def airfalse_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	text = "–í—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–≥–Ω—É—Ç—å —Å–ª–µ—Ç?"
	return call.message.edit_text(text, reply_markup=twoFactorSclet(_id))


@adminRouter.callback_query(F.data.startswith("yfs_"))
async def yfs_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	await db.update_phone_number_status(int(_id), "cancel")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	admin_text += f"\n‚ö†Ô∏è –í—ã –ø–æ–º–µ—Ç–∏–ª–∏ —Å–ª–µ—Ç –¥–ª—è –Ω–æ–º–µ—Ä–∞ <code>{info['phone_number']}</code>"
	user_text = (
		f"‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ <code>{info['phone_number']}</code> –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑ –∑–∞ —Å–ª–µ—Ç–∞"
	)
	await bot.send_message(chat_id=user["_id"], text=user_text)
	return call.message.edit_text(admin_text)


@userRouter.callback_query(F.data.startswith("falseauth_"))
async def falseauth_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	await db.update_phone_number_status(int(_id), "false_user")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	admin_text += (
		f"\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–¥–∞—á—É –≤ –∞—Ä–µ–Ω–¥—É —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ <code>{info['phone_number']}</code>"
	)
	user_text = (
		f"‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ <code>{info['phone_number']}</code> –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º–∏"
	)
	await bot.send_message(chat_id=info["worker_id"], text=admin_text)
	return call.message.edit_text(user_text)


@adminRouter.callback_query(F.data.startswith("tffalsework_"))
async def tffalsework_page(call: CallbackQuery, state: FSM):
	_id = int(call.data.split("_")[1])
	await db.update_phone_number_status(_id, "false")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	admin_text += "\n‚ö†Ô∏è –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞—Ä–µ–Ω–¥—É —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞"
	user_text = (
		f"‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ <code>{info['phone_number']}</code> –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"
	)
	await bot.send_message(chat_id=user["_id"], text=user_text)
	return call.message.edit_text(admin_text)


@adminRouter.callback_query(F.data.startswith("openwpan_"))
async def openwpan_page(call: CallbackQuery, state: FSM):
	_id = call.data.split("_")[1]
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	return call.message.edit_text(admin_text, reply_markup=workPanel(_id, info["status"]))


@adminRouter.message(F.text == "üóÇ –û—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤")
async def queue_admin_page(msg: Message, state: FSM):
	list_phones = await db.get_all_numbers_in_queue()
	text = "<b>üóÇ –û—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤</b>\n\n<i>‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>"
	key = phonesListWorks(list_phones[:5], 0, len(list_phones[:5]), len(list_phones))
	return msg.answer(text, reply_markup=key)


@adminRouter.callback_query(F.data == "phoneworklist")
async def call_queue_admin_page(call: CallbackQuery, state: FSM):
	list_phones = await db.get_all_numbers_in_queue()
	text = "<b>üóÇ –û—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤</b>\n\n<i>‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>"
	key = phonesListWorks(list_phones[:5], 0, len(list_phones[:5]), len(list_phones))
	return call.message.edit_text(text, reply_markup=key)


@adminRouter.callback_query(F.data.startswith("getphone_"))
async def getphone_page(call: CallbackQuery, state: FSM):
	_id = int(call.data.split("_")[1])
	info = await db.get_queue_info_by_id(_id)
	user = await db.get_user_info(int(info["user_id"]))
	create_at = user["created_at"]
	formatted_date = create_at.strftime("%Y-%m-%d %H:%M")
	text = (
		f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user['full_name']}</code>\n"
		f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n"
		f"üÜî: <code>{user['_id']}</code>\n\n"
		f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{formatted_date}</code>\n\n"
		f"üîê –†–æ–ª—å: <code>{ROLES[user['role']]}</code>\n\n"
		f"üëõ –ë–∞–ª–∞–Ω—Å: <code>{user['balance']}$</code>\n\n"
		"‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è\n\n"
		f"üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{info['phone_number']}</code>"
	)
	return call.message.edit_text(text, reply_markup=startPhoneWork(_id))


@adminRouter.callback_query(F.data.startswith("startwork_"))
async def startwork_page(call: CallbackQuery, state: FSM):
	_id = int(call.data.split("_")[1])
	await db.update_at_queue(int(_id))
	info = await db.get_queue_info_by_id(_id)
	user = await db.get_user_info(int(info["user_id"]))
	create_at = user["created_at"]
	formatted_date = create_at.strftime("%Y-%m-%d %H:%M")
	text = (
		f"<b>üì± –í–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞—Å—Ç–∞–ª–∞ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–æ–º–µ—Ä–∞</b> <code>{info['phone_number']}</code>\n\n"
		"<b>‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –≤ —Ç–µ—á–µ–Ω–∏–∏ 5-—Ç–∏ –º–∏–Ω—É—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤ whatsapp</b>"
	)
	await bot.send_message(user["_id"], text)
	text = phone_default_text(user, info)
	text += "\n<b>–ß—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá</b>"
	await db.update_phone_number_status(_id, "wait_auth")
	await db.update_woeker_phone(_id, call.from_user.id)
	await call.message.edit_text(
		text=text, message_thread_id=WORK_THREAD_ID, reply_markup=workPanel(_id, "wait_auth")
	)


@adminRouter.callback_query(F.data.startswith("getauthcode_"))
async def getauthcode_page(call: CallbackQuery, state: FSM):
	_id = int(call.data.split("_")[1])
	text = (
		"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
		"–í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
		"–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
	)
	key = openWorkPanel(_id)
	await state.set_state(setAuthCode.id_)
	await state.update_data(id_=_id)
	await state.set_state(setAuthCode.code)
	data = await state.get_data()
	return call.message.edit_text(text, reply_markup=key)


@adminRouter.message(StateFilter(setAuthCode.code))
async def set_auth_code_ff(msg: Message, state: FSM):
	code = msg.text
	data = await state.get_data()
	await state.clear()
	text = f"–í—ã –≤–≤–µ–ª–∏ –∫–æ–¥: <code>{code}</code>\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?"
	key = sendCodeUser(data["id_"], code)
	return msg.answer(text, reply_markup=key)


@adminRouter.callback_query(F.data.startswith("sndc|"))
async def send_code_to_user(call: CallbackQuery, state: FSM):
	_, _id, code = call.data.split("|")
	await db.update_phone_number_status(int(_id), "user_auth")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	text = (
		f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: <code>{code}</code> –ø–æ –Ω–æ–º–µ—Ä—É <code>{info['phone_number']}</code>\n\n"
		'–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥–µ—Ç–µ –µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ –í–æ—à–µ–ª"'
	)
	await bot.send_message(chat_id=user["_id"], text=text, reply_markup=authUserKey(_id))
	admin_text = phone_default_text(user, info)
	admin_text += (
		"\n‚è≥ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n"
		"<i>‚ÑπÔ∏è –ï—Å–ª–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∏–∫ –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ–π—á–∞—Å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É, "
		"–¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá</i>"
	)
	return call.message.edit_text(admin_text, reply_markup=workPanel(_id, "user_auth"))


@userRouter.callback_query(F.data.startswith("sucauth_"))
async def sucauth_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	_id = int(_id)
	await db.update_phone_number_status(_id, "in_proccess")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	user_text = (
		"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ –æ–∫–æ–Ω—á–Ω–∏—é –∞—Ä–µ–Ω–¥—ã –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø—Ä–∏–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ ‚è≥"
	)
	await call.message.edit_text(user_text)
	admin_text = phone_default_text(user, info)
	admin_text += "\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Ö–æ–¥, –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å"
	await bot.send_message(
		chat_id=info["worker_id"], text=admin_text, reply_markup=workPanel(_id, "in_proccess")
	)


@adminRouter.callback_query(F.data.startswith("sucwork_"))
async def sucwork_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	admin_text = phone_default_text(user, info)
	admin_text += "\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—É?"
	key = twoFactorSucWork(_id)
	return call.message.edit_text(admin_text, reply_markup=key)


@adminRouter.callback_query(F.data.startswith("tfsucwork_"))
async def twofactor_page(call: CallbackQuery, state: FSM):
	_, _id = call.data.split("_")
	settings = await db.get_settings()
	amount_pay = settings["amount_pay"]
	info = await db.get_queue_info_by_id(int(_id))
	user = await db.get_user_info(int(info["user_id"]))
	worker_id = int(info["worker_id"])
	up_balance = await db.update_amount_user(user["_id"], float(amount_pay))
	if up_balance["status"]:
		await db.create_transactions(user["_id"], float(amount_pay), "replenishment")
		if user["refferer"] is not None:
			amount_ref = round(float(amount_pay * (float(settings["referal_procent"]) / 100)), 2)
			await db.update_amount_user(int(user["refferer"]), amount_ref)
			await db.create_transactions(user["refferer"], float(amount_pay), "refferal")
			text_red = (
				f"<b>ü§ù –í—ã–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–µ–ª–∞</b>\n\n"
				f"üëõ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{amount_ref}$</code>"
			)
			await bot.send_message(chat_id=user["refferer"], text=text_red)
		await db.update_phone_number_status(int(_id), "done")
		admin_text = phone_default_text(user, info)
		admin_text += (
			"\n‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!"
		)
		user_text = (
			f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä <code>{info['phone_number']}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
			f"üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{up_balance['new_amount']}$</code>"
		)
		await bot.send_message(chat_id=user["_id"], text=user_text)
		await db.update_at_queue(int(_id))
		return call.message.edit_text(admin_text, reply_markup=None)
	else:
		msg_error = up_balance["error"]
		return call.answer(msg_error, True)


@adminRouter.message(F.text == "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def active_ticket_page(msg: Message, state: FSM):
	active_list = await db.get_all_queue_active()
	active_list.reverse()
	key = activeTicketListKey(active_list[:5], 0, len(active_list[:5]), len(active_list))
	text = (
		"<b>‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
		"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã –µ–µ –ø–æ—Ç–µ—Ä—è–ª–∏"
	)
	return msg.answer(text, reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_gp_next_"))
async def list_payments_func_next(call: CallbackQuery, state: FSM):
	step = int(call.data.replace("list_gp_next_", ""))
	await state.clear()
	active_list = await db.get_all_queue_active()
	active_list.reverse()
	if len(active_list[step : step + 5]) == 0:
		await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
	else:
		key = activeTicketListKey(
			active_list[step : step + 5], step, len(active_list[: step + 5]), len(active_list)
		)
		await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_gp_back_"))
async def list_payments_page_back(call: CallbackQuery, state: FSM):
	step = int(call.data.replace("list_gp_back_", ""))
	if step == 0:
		await call.answer("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
	else:
		await state.clear()
		active_list = await db.get_all_transactions()
		active_list.reverse()
		key = activeTicketListKey(
			active_list[step - 5 : step], step - 5, len(active_list[:step]), len(active_list)
		)
		await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_pl_next_"))
async def list_payments_l_func_next(call: CallbackQuery, state: FSM):
	step = int(call.data.replace("list_pl_next_", ""))
	await state.clear()
	active_list = await db.get_all_numbers_in_queue()
	if len(active_list[step : step + 5]) == 0:
		await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
	else:
		key = phonesListWorks(
			active_list[step : step + 5], step, len(active_list[: step + 5]), len(active_list)
		)
		await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith("list_pl_back_"))
async def list_payments_l_page_back(call: CallbackQuery, state: FSM):
	step = int(call.data.replace("list_pl_back_", ""))
	if step == 0:
		await call.answer("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", True)
	else:
		await state.clear()
		active_list = await db.get_all_numbers_in_queue()
		key = phonesListWorks(
			active_list[step - 5 : step], step - 5, len(active_list[:step]), len(active_list)
		)
		await call.message.edit_reply_markup(reply_markup=key)