from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *
from typing import Any, Dict, Union
from loader import *
from datetime import datetime
from keyboards.reply.usermainkey import *
from keyboards.inline.userinlinekey import *
from loguru import logger
from utils.misc_func.bot_models import *


from typing import *
from keyboards.inline.adminkeyinline import *

from data.config import ROLES
from states.user_state import *
from data.config import STATUS_QUEUE


@userRouter.callback_query(F.data=='queue_list')
async def queue_page(call: CallbackQuery, state: FSM):

    list_queue = await db.get_in_queue_user(call.from_user.id)
    
    text = f'''
<b>üìÑ –û—á–µ—Ä–µ–¥—å</b>

<i>‚ÑπÔ∏è –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏. 
–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–ù–∞–∂–∞–≤ –Ω–∞ "üóë" –≤—ã —É–¥–∞–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏</i>
'''
    
    key = queuePagination(list_queue[0:5], 0, len(list_queue[:5]), len(list_queue))

    await call.message.delete()

    return call.message.answer(text, reply_markup=key)


@userRouter.callback_query(F.data.startswith('list_ph_next_'))
async def listPhoneFunc_next(call: CallbackQuery, state: FSM):
    
    step = int(call.data.replace('list_ph_next_', ''))
    
    await state.clear()

    list_queue: list = await db.get_in_queue_user(call.from_user.id)
    
        
    if len(list_queue[step:step+5]) == 0:
        await call.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', True)
        
    else:        
        key = queuePagination(list_queue[step:step+5], step, len(list_queue[:step+5]), len(list_queue))
        
        await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith('list_ph_back_'))
async def listPhonePage_back(call: CallbackQuery, state: FSM):
    
    step = int(call.data.replace('list_ph_back_', ''))
    
    if step == 0:
        await call.answer('–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', True)
    
    else:
        await state.clear()
        
        list_queue: list = await db.get_in_queue_user(call.from_user.id)
 
        key = queuePagination(list_queue[step-5:step], step-5, len(list_queue[:step]), len(list_queue))
        
        await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith('open_ph_'))
async def open_ph_page(call: CallbackQuery, state: FSM):

    _, _, type_, _id = call.data.split('_')

    logger.warning(type_)
    logger.warning(_id)

    _id = int(_id)

    queue_info = await db.get_queue_info_by_id(_id)

    text = f'''
<b>‚ÑπÔ∏è –ò–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ</b>

üì≤ –ù–æ–º–µ—Ä: <code>{queue_info["phone_number"]}</code>
üìÑ –ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: 0
üî∑ –°—Ç–∞—Ç—É—Å: {STATUS_QUEUE[queue_info["status"]]["name"]}
'''
    _call = 'queue_list' if type_ == 'q' else 'number_history'

    return call.message.edit_text(text, reply_markup=backFunKey(_call))


@userRouter.callback_query(F.data.startswith('delph_'))
async def delph__page(call: CallbackQuery, state: FSM):
    
    _id = int(call.data.replace('delph_', ''))

    queue_info = await db.get_queue_info_by_id(_id)

    if queue_info["status"] not in ['in_queue']:

        return call.answer('‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —É–∂–µ –≤–∑—è–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')

    text = f'''
<b>‚ùì –í—ã —É–≤–µ—Ä–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥?</b>

<i>‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ –∏ –¥–æ–±–∞–≤–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞ –æ–Ω –≤—Å—Ç–∞–Ω–µ—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏</i>
'''

    return call.message.edit_text(text, reply_markup=deletePhoneTwoFactor(_id))


@userRouter.callback_query(F.data.startswith('sucdelph_'))
async def sucdelph_func(call: CallbackQuery, state: FSM):

    _id = int(call.data.replace('sucdelph_', ''))

    queue_info = await db.get_queue_info_by_id(_id)

    if queue_info["status"] not in ['in_queue']:

        return call.answer('–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —É–∂–µ –≤–∑—è–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', True)

    delete = await db.update_phone_number_status(_id, 'deleted')

    if delete:
        return call.message.edit_text('<b>‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>', reply_markup=backFunKey('queue_list'))
    
    else:
        return call.answer('<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞</b>', True)
    


@userRouter.callback_query(F.data=='number_history')
async def number_history_page(call: CallbackQuery, state: FSM):

    list_queue = await db.get_all_phone_numbers_user(call.from_user.id)
    list_queue.reverse()

    text = f'''
<b>üóÇ –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤</b>

<i>‚ÑπÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤</i>
'''
    
    key = historyPhoneNumberPagination(list_queue[0:5], 0, len(list_queue[:5]), len(list_queue))

    await call.message.delete()

    return call.message.answer(text, reply_markup=key)


@userRouter.callback_query(F.data.startswith('list_hpn_next_'))
async def listPhoneFunc_next(call: CallbackQuery, state: FSM):
    
    step = int(call.data.replace('list_hpn_next_', ''))
    
    await state.clear()

    list_queue: list = await db.get_all_phone_numbers_user(call.from_user.id)
    list_queue.reverse()
        
    if len(list_queue[step:step+5]) == 0:
        await call.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', True)
        
    else:
        key = historyPhoneNumberPagination(list_queue[step:step+5], step, len(list_queue[:step+5]), len(list_queue))
        
        await call.message.edit_reply_markup(reply_markup=key)


@userRouter.callback_query(F.data.startswith('list_hpn_back_'))
async def listPhonePage_back(call: CallbackQuery, state: FSM):
    
    step = int(call.data.replace('list_hpn_back_', ''))
    
    if step == 0:
        await call.answer('–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', True)
    
    else:
        await state.clear()
        
        list_queue: list = await db.get_all_phone_numbers_user(call.from_user.id)
        list_queue.reverse()
   
        key = historyPhoneNumberPagination(list_queue[step-5:step], step-5, len(list_queue[:step]), len(list_queue))
        
        await call.message.edit_reply_markup(reply_markup=key)