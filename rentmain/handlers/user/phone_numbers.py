from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *
from typing import Any, Dict, Union
from loader import *
from datetime import datetime
from keyboards.reply.usermainkey import *
from keyboards.inline.userinlinekey import *
from loguru import logger
from utils.misc_func.bot_models import *


from typing import *
from keyboards.inline.adminkeyinline import *

from data.config import ROLES
from states.user_state import *
from utils.misc_func.otherfunc import format_phone_number



# ---- –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é number_rent_start_page ----
@userRouter.callback_query(F.data=='number_rent')
async def number_rent_start_page(call: CallbackQuery, state):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ phone_number
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞:</b>",
        reply_markup=rent_price_kb()
    )
    await call.answer()

# ---- –¥–æ–±–∞–≤–∏—Ç—å: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ----
@userRouter.callback_query(lambda c: c.data and c.data.startswith("tariff|"))
async def tariff_selected(call: CallbackQuery, state):
    # —Ñ–æ—Ä–º–∞—Ç callback_data: tariff|<price>|<label>
    try:
        _, price_str, label = call.data.split("|")
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ –≤ FSM (aiogram v3: FSMContext-like API)
    # state –∑–¥–µ—Å—å –≤ —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç set_state()/update_data()/get_data()
    await state.update_data(tariff_price=float(price_str), tariff_label=f"{price_str}$/{label}min")

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π state addPhoneNumber.phone_number)
    await state.set_state(addPhoneNumber.phone_number)

    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {price_str}$ / {label}min.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>79999999999</code>.",
        parse_mode="HTML",
        reply_markup=backFunKey('backMainMenu')
    )
    await call.answer()

    text = f'''
<b>üì≤ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä</b>

<i>‚ÑπÔ∏è –ß—Ç–æ –±—ã —Å–¥–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>

<code>79999999999</code>

<i>üîî –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å, –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –¥–æ–π–¥–µ—Ç –¥–æ –≤–∞—Å –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i>
'''

    await call.message.delete()

    return call.message.answer(text, reply_markup=backFunKey('backMainMenu'))



# ---- –∑–∞–º–µ–Ω–∏—Ç—å/–ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é addPhoneNumber_phone_number_handler ----
@userRouter.message(addPhoneNumber.phone_number)
async def addPhoneNumber_phone_number_handler(msg: Message, state):
    phone_number = format_phone_number(msg.text)
    logger.warning(phone_number)

    if phone_number is False:
        await state.set_state(addPhoneNumber.phone_number)
        return msg.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>79999999999</code>',
            reply_markup=backFunKey('backMainMenu'),
            parse_mode="HTML"
        )

    # –±–µ—Ä–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ FSM (–µ—Å–ª–∏ –µ—Å—Ç—å)
    data = await state.get_data()
    tariff_price = data.get("tariff_price")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    tariff_label = data.get("tariff_label")

    # === –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç–µ db.add_phone_number —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å tariff (—Å–º. –Ω–∏–∂–µ) ===
    # –ø—Ä–∏–º–µ—Ä: add = await db.add_phone_number(user_id, phone_number, tariff_price, tariff_label)
    # –µ—Å–ª–∏ db.add_phone_number –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∞—Ä–∏—Ñ ‚Äî –ø–æ–º–µ–Ω—è–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤ db –∏–ª–∏ –≤—ã–∑–æ–≤–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    add = await db.add_phone_number(msg.from_user.id, phone_number, tariff_price)

    await state.clear()

    if add['status']:
        text = f'''
<b>‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> {msg.text} <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!</b>

<i>üìÑ –ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> <code>{add["msg"]}</code>
'''
    else:
        text = f'''
<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å</b>

üìÑ –ü—Ä–∏—á–∏–Ω–∞: <code>{add["msg"]}</code>
'''
    await msg.answer(text, reply_markup=backFunKey('backMainMenu'), parse_mode="HTML")

    # === —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º admin —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π payout, –ø–µ—Ä–µ–¥–∞—ë–º —Å—É–º–º—É ===
    # number_id = add.get("number_id")  # –µ—Å–ª–∏ db –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id
    # if number_id:
    #     await bot.send_message(ADMIN_CHAT_ID,
    #         f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {phone_number}\n–¢–∞—Ä–∏—Ñ: {tariff_label or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nID: {number_id}",
    #         reply_markup=make_admin_payout_kb(number_id, tariff_price)
    #     )
    