from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data.config import STATUS_TRANSACTIONS


def sendPaymentKey(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="sendcheck"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"gettrans_{_id}"))
    return key.as_markup()


def activeTicketListKey(
    transactionsList: list[dict], start_count: int = 0, step_count: int = 0, allTransactions: int = 0
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    for item in transactionsList:
        name_btn = f"{item['phone_number']}"
        key.row(InlineKeyboardButton(text=name_btn, callback_data=f"openwpan_{item['_id']}"))
    key.row(
        InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="payment ")
    )
    key.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_gp_back_{start_count}"),
        InlineKeyboardButton(text=f"{step_count}/{allTransactions}", callback_data="kkkk"),
        InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_gp_next_{step_count}")
    )
    return key.as_markup()


def allUserTicketListKey(
    transactionsList: list[dict],
    start_count: int = 0,
    step_count: int = 0,
    allTransactions: int = 0,
    user_id: int = 0
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    for item in transactionsList:
        name_btn = f"{item['phone_number']}"
        key.row(InlineKeyboardButton(text=name_btn, callback_data=f"openwpan_{item['_id']}"))
    key.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_ut_back_{start_count}_{user_id}"
        ),
        InlineKeyboardButton(text=f"{step_count}/{allTransactions}", callback_data="kkkk"),
        InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_ut_next_{step_count}_{user_id}"
        )
    )
    key.row(InlineKeyboardButton(text="üë§ –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"openuser_{user_id}"))
    return key.as_markup()


def sendMailingKey() -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚ñ∂Ô∏è –†–∞–∑–æ—Å–ª–∞—Ç—å", callback_data="start_spam"))
    key.row(InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∞", callback_data="falsespam"))
    return key.as_markup()


def mailingFalseKey() -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∞", callback_data="falsespam"))
    return key.as_markup()


def transactionsListKey(
    transactionsList: list[dict], start_count: int = 0, step_count: int = 0, allTransactions: int = 0
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    for item in transactionsList:
        name_btn = (
            f"{STATUS_TRANSACTIONS[item.get('status')]['symbol']} | "
            f"ID: {item.get('_id')} | {item.get('amount')}$"
        )
        key.row(InlineKeyboardButton(text=name_btn, callback_data=f"gettrans_{item['_id']}"))
    key.row(
        InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="payment ")
    )
    key.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_tr_back_{start_count}"),
        InlineKeyboardButton(text=f"{step_count}/{allTransactions}", callback_data="kkkk"),
        InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_tr_next_{step_count}")
    )
    return key.as_markup()


def transactionsListUserKey(
    transactionsList: list[dict],
    start_count: int = 0,
    step_count: int = 0,
    allTransactions: int = 0,
    user_id: int = 0
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    for item in transactionsList:
        name_btn = (
            f"{STATUS_TRANSACTIONS[item.get('status')]['symbol']} | "
            f"ID: {item.get('_id')} | {item.get('amount')}$"
        )
        key.row(InlineKeyboardButton(text=name_btn, callback_data=f"gettrans_{item['_id']}"))
    key.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_tru_back_{start_count}_{user_id}"
        ),
        InlineKeyboardButton(text=f"{step_count}/{allTransactions}", callback_data="kkkk"),
        InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_tru_next_{step_count}_{user_id}"
        )
    )
    key.row(InlineKeyboardButton(text="üë§ –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"openuser_{user_id}"))
    return key.as_markup()


def twoFactorFalsePayKey(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(text="üî¥ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"falpays_{_id}")
    )
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"gettrans_{_id}"))
    return key.as_markup()


def transactionViewerKey(_id: int, status: str, amount: float | None = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å amount ‚Äî –∫–Ω–æ–ø–∫–∞ '–í—ã–ø–ª–∞—Ç–∏—Ç—å' –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É –∏ callback: payout_<id>_<amount>
    –ï—Å–ª–∏ amount –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî callback –æ—Å—Ç–∞—ë—Ç—Å—è payout_<id> –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—É–º–º—É –∏–∑ –ë–î.
    """
    key = InlineKeyboardBuilder()
    if status == "wait_withdraft":
        if amount is not None:
            # –ü–µ—Ä–µ–¥–∞—ë–º —Å—É–º–º—É –ø—Ä—è–º–æ –≤ callback (–±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ)
            key.row(InlineKeyboardButton(text=f"üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å ({amount}$)", callback_data=f"payout_{_id}_{amount}"))
        else:
            # –ë–µ–∑ —Å—É–º–º—ã ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥—Ä—É–∑–∏—Ç –µ—ë –∏–∑ –ë–î –ø–æ id
            key.row(InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payout_{_id}"))
        key.row(InlineKeyboardButton(text="üî¥ –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"falsepay_{_id}"))
        key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="transactions"))
    else:
        key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="transactions"))
    return key.as_markup()


def workPanel(_id: int, status: str) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    match status:
        case "wait_auth":
            key.row(InlineKeyboardButton(text="üì≤ –í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data=f"getauthcode_{_id}"))
            key.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"falsenum_{_id}"))
        case "in_proccess":
            key.row(InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"sucwork_{_id}"))
            key.row(InlineKeyboardButton(text="‚ùå –°–ª–µ—Ç", callback_data=f"airfalse_{_id}"))
        case "user_auth":
            key.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"falsenum_{_id}"))
    return key.as_markup()


def twoFactorSclet(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"yfs_{_id}"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"openwpan_{_id}"))
    return key.as_markup()


def twoFactorCancleWork(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"tffalsework_{_id}"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"openwpan_{_id}"))
    return key.as_markup()


def twoFactorSucWork(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚úÖ –î–∞, –≤—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"tfsucwork_{_id}"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"openwpan_{_id}"))
    return key.as_markup()


def sendCodeUser(_id: int, code: str) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"sndc|{_id}|{code}"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"openwpan_{_id}"))
    return key.as_markup()


def openWorkPanel(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"openwpan_{_id}"))
    return key.as_markup()


def startPhoneWork(_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="phoneworklist"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"startwork_{_id}")
    )
    return key.as_markup()


def phonesListWorks(
    phoneList: list[dict], start_count: int = 0, step_count: int = 0, allPhones: int = 0
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    for item in phoneList:
        number = f"{item['phone_number']}"
        key.row(InlineKeyboardButton(text=number, callback_data=f"getphone_{item['_id']}"))
    key.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_pl_back_{start_count}"),
        InlineKeyboardButton(text=f"{step_count}/{allPhones}", callback_data="kkkk"),
        InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_pl_next_{step_count}")
    )
    return key.as_markup()


def searchUserKey() -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="user ")
    )
    return key.as_markup()


def deleteTicketKey(uniq_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delticket_{uniq_id}"))
    return key.as_markup()


def withdraftPanle(_id: int, amount: float | None = None) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞/–ø–∞–Ω–µ–ª–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å amount ‚Äî –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—É–º–º—É –∏ callback payout_<id>_<amount>
    """
    key = InlineKeyboardBuilder()
    if amount is not None:
        key.row(InlineKeyboardButton(text=f"üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å ({amount}$)", callback_data=f"payout_{_id}_{amount}"))
    else:
        key.row(InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payout_{_id}"))
    key.row(InlineKeyboardButton(text="üî¥ –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"falsepay_{_id}"))
    return key.as_markup()


def withdraftChatPanel(url: str) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚ÜóÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–≤–æ–¥—É", url=url))
    return key.as_markup()


def userOptions(user_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(text="üîê –†–æ–ª—å", callback_data=f"set_role_{user_id}"),
        InlineKeyboardButton(text="üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"smsg_{user_id}")
    )
    key.row(
        InlineKeyboardButton(
            text="üí∏ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data=f"transactions_{user_id}"
        )
    )
    key.row(
        InlineKeyboardButton(text="üì≤ –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"numhistory_{user_id}")
    )
    key.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"statistic_{user_id}")
    )
    return key.as_markup()


def setRoleKey(user_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(text="üîê –ê–¥–º–∏–Ω", callback_data=f"updrole_{user_id}_admin"),
        InlineKeyboardButton(text="üë§ –Æ–∑–µ—Ä", callback_data=f"updrole_{user_id}_user"),
        InlineKeyboardButton(text="üî¥ –ë–∞–Ω", callback_data=f"updrole_{user_id}_ban")
    )
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"openuser_{user_id}"))
    return key.as_markup()


def sendMsgKey(user_id: int) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="sendmsguser"))
    key.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"openuser_{user_id}"))
    return key.as_markup()


def backFunKey(call: str) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=call))
    return key.as_markup()


def waitKey() -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(InlineKeyboardButton(text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ", callback_data="wait"))
    return key.as_markup()


def userOpenKey(
    user_id: int, admin: int, moder: int, ban: int
) -> InlineKeyboardMarkup:
    key = InlineKeyboardBuilder()
    key.row(
        InlineKeyboardButton(
            text=f"{'‚úÖ' if admin == 1 else '‚ùå'} –ê–¥–º–∏–Ω",
            callback_data=f"usadmin_{user_id}_{'0' if admin == 1 else '1'}"
        ),
        InlineKeyboardButton(
            text=f"{'‚úÖ' if moder == 1 else '‚ùå'} –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            callback_data=f"usmoder_{user_id}_{'0' if moder == 1 else '1'}"
        ),
        InlineKeyboardButton(
            text=f"{'‚úÖ' if ban == 1 else '‚ùå'} –ë–∞–Ω",
            callback_data=f"usban_{user_id}_{'0' if ban == 1 else '1'}"
        )
    )
    return key.as_markup()


def clear_html(get_text: str) -> str:
    if get_text is not None:
        get_text = (
            get_text.replace("<code>", "")
            .replace("</code>", "")
            .replace("<b>", "")
            .replace("</b>", "")
            .replace("<i>", "")
            .replace("</i>", "")
        )
    else:
        get_text = ""
    return get_text


# –£—Ç–∏–ª–∏—Ç–∞: –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É payout —Å —Å—É–º–º–æ–π —É–¥–æ–±–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
def make_admin_payout_kb(number_id: int, amount: float | None = None) -> InlineKeyboardMarkup:
    """
    –£–¥–æ–±–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:
      await bot.send_message(ADMIN_CHAT_ID, text, reply_markup=make_admin_payout_kb(number_id, amount))
    """
    return withdraftPanle(number_id, amount)
